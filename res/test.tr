// SPDX-FileCopyrightText: 2022 Cem Ge√ßgel <gecgelcem@outlook.com>
// SPDX-License-Identifier: GPL-3.0-or-later

// [Primary]
// ~~~~~~~~~

let decimal = 10;
let access  = decimal;
let group   = (access);
let call    = function();

// [Unary]
// ~~~~~~~

let posate = +group;
var negate = -posate;
negate++;
negate--;
++negate;
--negate;
let not        = negate;
let complement = ~not;

// [Factor]
// ~~~~~~~~

let multiply = not * complement;
let divide   = complement / multiply;
let reminder = multiply % divide;

// [Term]
// ~~~~~~

let add = divide + reminder;
let sub = reminder - add;

// [Shift]
// ~~~~~~~

let leftShift  = add << sub;
let rightShift = sub >> leftShift;

// [Bitwise AND]
// ~~~~~~~~~~~~~

let bitwiseAND = leftShift & rightShift;

// [Bitwise XOR]
// ~~~~~~~~~~~~~

let bitwiseXOR = rightShift ^ bitwiseAND;

// [Bitwise OR]
// ~~~~~~~~~~~~~

let bitwiseOR = bitwiseAND | bitwiseXOR;

// [Comparison]
// ~~~~~~~~~~~~

let smallerThan    = bitwiseXOR < bitwiseOR;
let smallerOrEqual = bitwiseOR <= smallerThan;
let largerThan     = smallerThan > smallerOrEqual;
let largerOrEqual  = smallerOrEqual >= largerThan;

// [Equality]
// ~~~~~~~~~~

let equal    = largerThan == largerOrEqual;
let notEqual = largerOrEqual != equal;

// [Logical AND]
// ~~~~~~~~~~~~~

let logicalAND = equal && notEqual;

// [Logical OR]
// ~~~~~~~~~~~~

var logicalOR = notEqual || logicalAND;

// [Assignment]
// ~~~~~~~~~~~~

logicalOR   = logicalAND;
logicalOR  *= logicalAND;
logicalOR  /= logicalAND;
logicalOR  %= logicalAND;
logicalOR  += logicalAND;
logicalOR  -= logicalAND;
logicalOR <<= logicalAND;
logicalOR >>= logicalAND;
logicalOR  &= logicalAND;
logicalOR  ^= logicalAND;
logicalOR  |= logicalAND;
